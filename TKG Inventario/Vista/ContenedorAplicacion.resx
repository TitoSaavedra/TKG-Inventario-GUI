<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgIAAAAAAABIS
        EiAEBAS2AwMDlwsLCw8AAAAAQkJCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARERDAAAA
        AAAMCwslBgYGugAAAP8AAAD6AwMDmwsKChYAAAAADw8NAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACcm
        JQAAAAAACQgGMgQGC8UBAQP/AAAA/wAAAP8BAgP+BAYJsgoJByMICAcAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAPDgwAlI6AAAsJBkUJESLXFzF6/wULJ/8AAAD/AAAA/wcOL/8VLW7/BwwZxgkHAjMAAAAAQkJBAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABgUCABcUCwILCgdaCxQq5B9Dnf8cNrT/BQiC/wAAHf8AACP/BgqH/xw2sv8cPI3/CA8f1ggH
        A0WQkpcBKysqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAYGBAAZFxIEBQQCZQwXNOsiSqz/IkTB/w4Ujf8HCqb/AACX/wAAm/8IC6P/DhOM/yBA
        vP8fRJ7/ChMp5AkIBlooJyMDFxYUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAASEhIAGxoZCgcHB30OHEDyJU+4/yZQzf8RG5X/DA6H/wkNm/8AAb3/AQG8/woN
        mP8MDof/DxeR/yNJxv8jSq3/DBc17wkJCHETExIGCgoKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABQUEAAcHBg4EAwCPChMs+SZRvv8pWNX/FSah/wwOiP8MD4j/Cw6S/wID
        uP8CBLf/Cw+Q/wwPif8MDoj/Eh2X/ydRzv8jSq7/BgsZ9AMCAH4ZGRgODg0MAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAFRQTAAAAAAANCwkjBAUHpwULGfsaN4H/K1za/xs0r/8MD4n/DA6F/wwP
        iv8MD4z/AwWy/wQGsP8MD4v/DA+K/wwPhv8LDob/FSWg/yhUz/8VLmv/BgsY+wUGCJ8GBQIZAAAAADY2
        NgAAAAAAAAAAAAAAAAAAAAAAAAAAABkZGQAAAAAAAwIANQYKFMgWLmz/JlG8/ylY0v8fPrr/DhON/wcJ
        V/8GCEX/Cgxw/wwPiP8GCKr/Bwmo/wwPif8KDXX/BwhL/wcITP8MD4b/Fyml/yVPx/8lT7n/FCtl/gUH
        Dr8IBwQ1AAAAAC4uLgAAAAAAAAAAAAAAAAAODQsAJCMgBQYFAloIDyPeHD2O/ytb1v8lTMn/Fyql/w0S
        iv8ICVn/BAUx/wkLYf8KDXb/DA6B/wkMn/8JDZ3/DA+D/woNdf8JC2n/BQY1/wcJT/8LDoT/ERyX/yFC
        v/8qWdP/GjiC/wcMGd4KCAZaMDAvBRYWFQAAAAAABQQEAAUEAQsGBgV/DRk58iJJqv8nU9D/GzOu/w8W
        kP8MDoj/Cgxv/wgKX/8LDoD/DA+L/wwPif8MD4f/CxCV/wsQlP8MD4f/DA+J/wwPi/8MDoT/CQtj/wkM
        av8MDof/DRKM/xkvqv8nU8//H0Oc/woTKfIIBwV/CAgHCwcHBgAMCwkiBggNnRMlVPkkTLr/Hz26/xEc
        lv8MD4n/DA6J/wwPiP8MDoP/DA+K/wwPif8MD4j/DA+L/wkMmv8NGrX/DRi0/wkMmv8MD4v/DA+I/wwP
        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
        8B/4H/g//B/4P/w//D/8P/w//H/+P/z//j8=
</value>
  </data>
</root>